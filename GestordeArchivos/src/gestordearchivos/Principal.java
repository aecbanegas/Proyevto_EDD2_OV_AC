/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestordearchivos;

import java.awt.Color;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import java.util.Map;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Text;
/**
 *
 * @author MBanegas
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        jm_registro.setForeground(Color.GRAY);
        jm_estandarizacion.setForeground(Color.gray);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_Campos = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jb_regresarcampos = new javax.swing.JButton();
        jb_borrarcampo = new javax.swing.JButton();
        jb_listarcampo = new javax.swing.JButton();
        jb_modificarcampo = new javax.swing.JButton();
        jb_agregarcampo = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jd_Registro = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jb_introducirregistro = new javax.swing.JButton();
        jb_modificarregistro = new javax.swing.JButton();
        jblistarregistro = new javax.swing.JButton();
        jb_buscarregistro = new javax.swing.JButton();
        jb_borrarregistro = new javax.swing.JButton();
        jb_salirregistro = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jt_registros = new javax.swing.JTable();
        jd_Estandarizacion = new javax.swing.JDialog();
        jb_xlss = new javax.swing.JButton();
        jb_xml = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jb_regresar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jb_cargararchivo = new javax.swing.JButton();
        jb_nuevoarchivo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jm_archivo = new javax.swing.JMenu();
        jm_campos = new javax.swing.JMenuItem();
        jm_registro = new javax.swing.JMenuItem();
        jm_estandarizacion = new javax.swing.JMenuItem();
        jm_guardar = new javax.swing.JMenu();
        jm_exitsave = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        jd_Campos.setSize(new java.awt.Dimension(700, 700));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jb_regresarcampos.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_regresarcampos.setText("Regresar");
        jb_regresarcampos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarcamposMouseClicked(evt);
            }
        });

        jb_borrarcampo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_borrarcampo.setText("Borrar Campos");
        jb_borrarcampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_borrarcampoMouseClicked(evt);
            }
        });

        jb_listarcampo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_listarcampo.setText("Listar Campos");
        jb_listarcampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_listarcampoMouseClicked(evt);
            }
        });

        jb_modificarcampo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_modificarcampo.setText("Modificar Campos");
        jb_modificarcampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_modificarcampoMouseClicked(evt);
            }
        });

        jb_agregarcampo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_agregarcampo.setText("Agregar Campo");
        jb_agregarcampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_agregarcampoMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 51, 51));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Menu Campos");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("GESTOR DE BASES DE DATOS OVAC");

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo", "Tamaño", "Llave Unica"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Nombre");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("Tipo");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Tamaño");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Llave Unica");
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jb_modificarcampo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_listarcampo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_borrarcampo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_regresarcampos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_agregarcampo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jb_agregarcampo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_modificarcampo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_listarcampo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_borrarcampo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_regresarcampos, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_CamposLayout = new javax.swing.GroupLayout(jd_Campos.getContentPane());
        jd_Campos.getContentPane().setLayout(jd_CamposLayout);
        jd_CamposLayout.setHorizontalGroup(
            jd_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_CamposLayout.setVerticalGroup(
            jd_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jd_Registro.setSize(new java.awt.Dimension(700, 700));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("GESTOR DE BASES DE DATOS OVAC");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 51, 51));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Menu Registros");

        jb_introducirregistro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_introducirregistro.setText("Indroducir Registro");
        jb_introducirregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_introducirregistroMouseClicked(evt);
            }
        });

        jb_modificarregistro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_modificarregistro.setText("Modificar Registro");
        jb_modificarregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_modificarregistroMouseClicked(evt);
            }
        });

        jblistarregistro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jblistarregistro.setText("Listar Registro");
        jblistarregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jblistarregistroMouseClicked(evt);
            }
        });

        jb_buscarregistro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_buscarregistro.setText("Buscar Registro");
        jb_buscarregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_buscarregistroMouseClicked(evt);
            }
        });

        jb_borrarregistro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_borrarregistro.setText("Borrar Registro");
        jb_borrarregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_borrarregistroMouseClicked(evt);
            }
        });

        jb_salirregistro.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jb_salirregistro.setText("Salir Registro");
        jb_salirregistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_salirregistroMouseClicked(evt);
            }
        });

        jt_registros.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jt_registros);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jb_salirregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_buscarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jblistarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_borrarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_modificarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_introducirregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jb_introducirregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_modificarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jblistarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_borrarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_buscarregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_salirregistro, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_RegistroLayout = new javax.swing.GroupLayout(jd_Registro.getContentPane());
        jd_Registro.getContentPane().setLayout(jd_RegistroLayout);
        jd_RegistroLayout.setHorizontalGroup(
            jd_RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jd_RegistroLayout.setVerticalGroup(
            jd_RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jd_Estandarizacion.setSize(new java.awt.Dimension(700, 700));

        jb_xlss.setText("Excel");
        jb_xlss.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_xlssMouseClicked(evt);
            }
        });

        jb_xml.setText("XML");
        jb_xml.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_xmlMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("GESTOR DE BASES DE DATOS OVAC");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Menu Estandarización");

        jb_regresar.setText("Regresar");
        jb_regresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_EstandarizacionLayout = new javax.swing.GroupLayout(jd_Estandarizacion.getContentPane());
        jd_Estandarizacion.getContentPane().setLayout(jd_EstandarizacionLayout);
        jd_EstandarizacionLayout.setHorizontalGroup(
            jd_EstandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_EstandarizacionLayout.createSequentialGroup()
                .addGroup(jd_EstandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_EstandarizacionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jd_EstandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jd_EstandarizacionLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jb_xlss, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_xml, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jb_regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jd_EstandarizacionLayout.setVerticalGroup(
            jd_EstandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_EstandarizacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(jd_EstandarizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_xlss, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_xml, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jb_regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jb_cargararchivo.setText("Cargar Archivo");
        jb_cargararchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_cargararchivoMouseClicked(evt);
            }
        });

        jb_nuevoarchivo.setText("Nuevo Archivo");
        jb_nuevoarchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_nuevoarchivoMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("GESTOR DE BASES DE DATOS OVAC");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(428, 428, 428)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jb_nuevoarchivo, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(jb_cargararchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jLabel1)
                .addGap(66, 66, 66)
                .addComponent(jb_cargararchivo)
                .addGap(87, 87, 87)
                .addComponent(jb_nuevoarchivo)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        jm_archivo.setText("Opciones de Archivo");
        jm_archivo.setEnabled(false);
        jm_archivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jm_archivoMouseClicked(evt);
            }
        });

        jm_campos.setText("Campos");
        jm_campos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_camposActionPerformed(evt);
            }
        });
        jm_archivo.add(jm_campos);

        jm_registro.setText("Registros");
        jm_registro.setEnabled(false);
        jm_registro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_registroActionPerformed(evt);
            }
        });
        jm_archivo.add(jm_registro);

        jm_estandarizacion.setText("Estandarizacion");
        jm_estandarizacion.setEnabled(false);
        jm_estandarizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_estandarizacionActionPerformed(evt);
            }
        });
        jm_archivo.add(jm_estandarizacion);

        jMenuBar1.add(jm_archivo);

        jm_guardar.setText("Guardar Archivo");
        jm_guardar.setEnabled(false);
        jm_guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jm_guardarMouseClicked(evt);
            }
        });
        jm_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_guardarActionPerformed(evt);
            }
        });
        jMenuBar1.add(jm_guardar);

        jm_exitsave.setText("Exit & Save");
        jm_exitsave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jm_exitsaveMouseClicked(evt);
            }
        });
        jm_exitsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_exitsaveActionPerformed(evt);
            }
        });
        jMenuBar1.add(jm_exitsave);

        jMenu3.setText("Exit");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        try {
            // TODO add your handling code here:
            if (flujo != null) {
                flujo.close();
                flujoBtree.close();
            }
        } catch (IOException ex) {
        }
        System.exit(0);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jb_cargararchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_cargararchivoMouseClicked
        JFileChooser jf = new JFileChooser("./");

        try {
            FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos OVAC", "ovac");
            //FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("Imagenes", "jpg", "png", "bmp");
            jf.setFileFilter(filtro);
            //jf.addChoosableFileFilter(filtro2);
            int selec = jf.showOpenDialog(this);

            if (selec == JFileChooser.APPROVE_OPTION) {
                archivo = jf.getSelectedFile();
                String path = archivo.getName();
                String pathbt = "";
                for (int i = 0; i < path.length() - 4; i++) {
                    pathbt += path.charAt(i);
                }
                System.out.println("Path para bt: " + pathbt);
                archivoBtree = new File("./" + pathbt + "ovacbt");
                flujo = new RandomAccessFile(archivo, "rw");
                flujoBtree = new RandomAccessFile(archivoBtree, "rw");
                arbol = new BTree();
                try {

                    avail = flujo.readInt();

                    System.out.println("Avail " + avail);
                    int cantidad = flujo.readInt();
                    for (int i = 0; i < cantidad; i++) {
                        campos.add(flujo.readUTF());
                        tiposcampos.add(flujo.readUTF());
                        sizecampos.add(flujo.readInt());
                        llaveunica.add(flujo.readBoolean());
                    }
                    cantllaves = flujoBtree.readInt();
                    for (int i = 0; i < cantllaves; i++) {
                        Registro r = new Registro(flujoBtree.readInt());//Lee la llave
                        r.setRRN(flujoBtree.readLong());//lee la RRN
                        arbol.insert(r);

                    }
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                    System.out.println("Campos= " + campos.size());
                    System.out.println("Tipos= " + tiposcampos.size());
                    System.out.println("Tamaños= " + sizecampos.size());
                    System.out.println("Llaves= " + llaveunica.size());
                }
                JOptionPane.showMessageDialog(this, "Archivo Cargado Exitosamente");

                // despues de que cargue el archivo valido
                jm_guardar.setEnabled(true);
                jm_archivo.setEnabled(true);
                jb_nuevoarchivo.setEnabled(false);
                jm_registro.setEnabled(true);
                jm_registro.setForeground(Color.BLACK);
                jm_estandarizacion.setEnabled(true);
                jm_estandarizacion.setForeground(Color.BLACK);

            } else {
                JOptionPane.showMessageDialog(this, "No Cargo Ningun Archivo");
            }

        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_jb_cargararchivoMouseClicked

    private void jb_nuevoarchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_nuevoarchivoMouseClicked
        try {
            if (jb_nuevoarchivo.isEnabled() == true) {
                String path = JOptionPane.showInputDialog("Ingrese el nombre del archivo: \n***Asegurese de que no existe un archivo con el mismo nombre***");

                if (path.length() != 0) {
                    archivo = new File("./" + path + ".ovac");
                    archivoBtree = new File("./" + path + ".ovacbt");
                    arbol = new BTree();
                    while (archivo.exists()) {
                        path = JOptionPane.showInputDialog("Ingrese el nombre del archivo: \n***Asegurese de que no existe un archivo con el mismo nombre***");
                        archivo = new File("./" + path + ".ovac");
                        archivoBtree = new File("./" + path + ".ovacbt");
                    }
                    try {
                        archivoBtree.createNewFile();
                        archivo.createNewFile();
                        flujo = new RandomAccessFile(archivo, "rw");
                        flujoBtree = new RandomAccessFile(archivoBtree, "rw");
                    } catch (Exception e) {
                        System.err.println(e.getMessage());
                    }
                    //despues de crear un archivo enable para guardarlo y enable para archivo
                    jb_nuevoarchivo.setEnabled(false);
                    jm_archivo.setEnabled(true);
                    jm_guardar.setEnabled(true);
                } else {
                    JOptionPane.showMessageDialog(this, "NO INGRESO UN NOMBRE VALIDO");
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "NO INGRESO NADA");
        }
    }//GEN-LAST:event_jb_nuevoarchivoMouseClicked

    private void jm_archivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jm_archivoMouseClicked

        //luego de crear un campo enable agregar a registro y estandarizacion
        jm_registro.setEnabled(true);
        jm_estandarizacion.setEnabled(true);
    }//GEN-LAST:event_jm_archivoMouseClicked

    private void jm_guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jm_guardarMouseClicked
        /*        if (jm_guardar.isEnabled()) {
            try {
                flujo.writeLong(campos.size());
                for (int i = 0; i < campos.size(); i++) {
                    flujo.writeUTF(campos.get(i));
                    flujo.writeUTF(tiposcampos.get(i));
                    flujo.writeInt(sizecampos.get(i));
                    flujo.writeBoolean(llaveunica.get(i));
                }
                System.out.println("Tamaño en bytes: " + flujo.length());

                flujo.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
            campos.clear();
            sizecampos.clear();
            llaveunica.clear();
            tiposcampos.clear();
            jm_archivo.setEnabled(false);
            jm_guardar.setEnabled(false);
            jb_nuevoarchivo.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Se ha guardado el archivo de manera satisfactoria!\nSe ha procedido a cerrarlo!");
        }*/
        if (flujo != null) {
            try {
                System.out.println("Guardando avail: " + avail);
                flujo.seek(0);
                flujo.writeInt(avail);
                flujo.writeInt(campos.size());
                for (int i = 0; i < campos.size(); i++) {
                    flujo.writeUTF(campos.get(i));
                    flujo.writeUTF(tiposcampos.get(i));
                    flujo.writeInt(sizecampos.get(i));
                    flujo.writeBoolean(llaveunica.get(i));
                }
                archivoBtree.delete();
                archivoBtree.createNewFile();
                flujoBtree.close();
                flujoBtree = new RandomAccessFile(archivoBtree, "rw");
                ArrayList<Registro> registros;
                registros = arbol.llaves();
                flujoBtree.writeInt(registros.size());
                for (int i = 0; i < registros.size(); i++) {
                    flujoBtree.writeInt(registros.get(i).getKey());
                    flujoBtree.writeLong(registros.get(i).getRRN());
                }
                flujoBtree.close();
                flujo.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
            campos.clear();
            sizecampos.clear();
            llaveunica.clear();
            tiposcampos.clear();
            jm_archivo.setEnabled(false);
            jm_guardar.setEnabled(false);
            jb_nuevoarchivo.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Se ha guardado el archivo de manera satisfactoria!\nSe ha procedido a cerrarlo!");
        }
    }//GEN-LAST:event_jm_guardarMouseClicked

    private void jb_agregarcampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_agregarcampoMouseClicked
        // TODO add your handling code here:
        if (campos.size() < 8) {
            String campo;
            do {
                campo = JOptionPane.showInputDialog("Ingrese el nombre del campo:\n*Menor o igual a 12 caracteres*");
            } while (campo == null || campo.equals("") || campo.length() > 12);
            String[] tipos = {"int", "String", "double", "boolean"};
            int respuesta = JOptionPane.showOptionDialog(null, "Presione el boton del tipo de dato a usar en el campo:",
                    "Seleccione un tipo", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, tipos, tipos[0]);
            String tipo = "";
            switch (respuesta) {
                case 0:
                    tipo = "int";
                    break;
                case 1:
                    tipo = "String";
                    break;
                case 2:
                    tipo = "double";
                    break;
                case 3:
                    tipo = "boolean";
                default:
                    break;
            }
            int size = -1;
            if (tipo.equals("int")) {
                boolean flag = false;
                for (int i = 0; i < llaveunica.size(); i++) {
                    if (llaveunica.get(i) == true) {
                        flag = true;
                    }
                }
                if (flag) {
                    //Valida que la llave sea unica
                    llaveunica.add(false);
                } else {
                    int confirmacion = JOptionPane.showConfirmDialog(null, "El campo es una llave?", null, JOptionPane.YES_NO_OPTION);
                    if (confirmacion == JOptionPane.YES_OPTION) {
                        llaveunica.add(true);
                    } else if (confirmacion == JOptionPane.NO_OPTION) {
                        llaveunica.add(false);
                    }
                }
            } else if (tipo.equals("double") || tipo.equals("boolean")) {
                llaveunica.add(false);
            } else {
                while (size < 1 || size > 15) {
                    try {
                        size = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el tamaño del campo entre 1-15:"));

                    } catch (Exception e) {
                        size = -1;
                    }
                }
                llaveunica.add(false);
            }
            campos.add(campo);
            tiposcampos.add(tipo);
            sizecampos.add(size);
            JOptionPane.showMessageDialog(jd_Campos, "Se ha agregado el campo exitosamente.");
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "Nombre", "Tipo", "Tamaño", "Llave Unica"
                    }
            ));
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            for (int i = 0; i < campos.size(); i++) {
                if (sizecampos.get(i) != -1) {
                    Object[] row = {campos.get(i), tiposcampos.get(i), sizecampos.get(i), llaveunica.get(i)};
                    modelo.addRow(row);
                } else {
                    Object[] row = {campos.get(i), tiposcampos.get(i), "N/A", llaveunica.get(i)};
                    modelo.addRow(row);
                }
            }
            jTable1.setModel(modelo);
            jm_registro.setForeground(Color.BLACK);
            jm_estandarizacion.setForeground(Color.BLACK);

            jm_registro.setEnabled(true);
            jm_estandarizacion.setEnabled(true);

        }
    }//GEN-LAST:event_jb_agregarcampoMouseClicked

    private void jb_modificarcampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_modificarcampoMouseClicked
        // TODO add your handling code here:
        if (campos.isEmpty()) {
            JOptionPane.showMessageDialog(jd_Campos, "No hay campos creados.");
        } else {
            String menu = "";
            for (int i = 0; i < campos.size(); i++) {
                menu += "Posicion:" + i + " " + campos.get(i) + "\n";
            }
            int opc = -1;
            while (opc < 0 || opc > campos.size()) {
                try {
                    opc = Integer.parseInt(JOptionPane.showInputDialog("Menu\n" + menu + "Ingrese la posicion de campo a modificar:"));
                } catch (Exception e) {
                    opc = -1;
                }
            }
            String campo;
            do {
                campo = JOptionPane.showInputDialog("Ingrese el nombre del campo:\n*Menor o igual a 12 caracteres*");
            } while (campo == null || campo.equals("") || campo.length() > 12);
            String[] tipos = {"int", "String", "double", "boolean"};
            int respuesta = JOptionPane.showOptionDialog(null, "Presione el boton del tipo de dato a usar en el campo:",
                    "Seleccione un tipo", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, tipos, tipos[0]);
            String tipo = "";
            switch (respuesta) {
                case 0:
                    tipo = "int";
                    break;
                case 1:
                    tipo = "String";
                    break;
                case 2:
                    tipo = "double";
                    break;
                case 3:
                    tipo = "boolean";
                default:
                    break;
            }
            int size = -1;
            while (size < 1 || size > 15) {
                try {
                    if (tipo.equals("int") || tipo.equals("double") || tipo.equals("boolean")) {

                    } else {
                        size = Integer.parseInt(JOptionPane.showInputDialog("Ingrese el tamaño del campo entre 1-15:"));
                    }
                } catch (Exception e) {
                    size = -1;
                }
                if (size == -1) {
                    break;
                }
            }
            boolean flag = false;
            for (int i = 0; i < llaveunica.size(); i++) {
                if (llaveunica.get(i) == true) {
                    flag = true;
                }
            }
            if (llaveunica.get(opc) == true) {
                int confirmacion = JOptionPane.showConfirmDialog(null, "El campo es una llave?", null, JOptionPane.YES_NO_OPTION);
                if (confirmacion == JOptionPane.YES_OPTION) {
                    llaveunica.remove(opc);
                    llaveunica.add(opc, true);
                } else if (confirmacion == JOptionPane.NO_OPTION) {
                    llaveunica.remove(opc);
                    llaveunica.add(opc, false);
                    System.out.println("Entra Modificar");
                }
            }
            if (flag) {
                //Valida que la llave sea unica
            } else if (flag == false && tipo.equals("int")) {
                int confirmacion = JOptionPane.showConfirmDialog(null, "El campo es una llave?", null, JOptionPane.YES_NO_OPTION);
                if (confirmacion == JOptionPane.YES_OPTION) {
                    llaveunica.remove(opc);
                    llaveunica.add(opc, true);
                } else if (confirmacion == JOptionPane.NO_OPTION) {
                    llaveunica.remove(opc);
                    llaveunica.add(opc, false);
                    System.out.println("Entra Modificar");
                }
            }
            campos.remove(opc);
            campos.add(opc, campo);
            tiposcampos.remove(opc);
            tiposcampos.add(opc, tipo);
            sizecampos.remove(opc);
            sizecampos.add(opc, size);
            JOptionPane.showMessageDialog(jd_Campos, "Se ha modificado el campo exitosamente.");
        }
    }//GEN-LAST:event_jb_modificarcampoMouseClicked

    private void jb_listarcampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_listarcampoMouseClicked
        // TODO add your handling code here:
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Nombre", "Tipo", "Tamaño", "Llave Unica"
                }
        ));
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < campos.size(); i++) {
            if (sizecampos.get(i) != -1) {
                Object[] row = {campos.get(i), tiposcampos.get(i), sizecampos.get(i), llaveunica.get(i)};
                modelo.addRow(row);
            } else {
                Object[] row = {campos.get(i), tiposcampos.get(i), "N/A", llaveunica.get(i)};
                modelo.addRow(row);
            }
        }
        jTable1.setModel(modelo);
        JOptionPane.showMessageDialog(jd_Campos, "Se ha completado la lista de campos.");
    }//GEN-LAST:event_jb_listarcampoMouseClicked

    private void jb_borrarcampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_borrarcampoMouseClicked
        // TODO add your handling code here:
        if (campos.isEmpty()) {
            JOptionPane.showMessageDialog(jd_Campos, "No hay campos creados.");
        } else {
            String menu = "";
            for (int i = 0; i < campos.size(); i++) {
                menu += "Posicion:" + i + " " + campos.get(i) + "\n";
            }
            int opc = -1;
            while (opc < 0 || opc > campos.size()) {
                try {
                    opc = Integer.parseInt(JOptionPane.showInputDialog("Menu\n" + menu + "Ingrese la posicion de campo a borrar:"));
                } catch (Exception e) {
                    opc = -1;
                }
            }
            campos.remove(opc);
            sizecampos.remove(opc);
            llaveunica.remove(opc);
            tiposcampos.remove(opc);
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "Nombre", "Tipo", "Tamaño", "Llave Unica"
                    }
            ));
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            for (int i = 0; i < campos.size(); i++) {
                if (sizecampos.get(i) != -1) {
                    Object[] row = {campos.get(i), tiposcampos.get(i), sizecampos.get(i), llaveunica.get(i)};
                    modelo.addRow(row);
                } else {
                    Object[] row = {campos.get(i), tiposcampos.get(i), "N/A", llaveunica.get(i)};
                    modelo.addRow(row);
                }
            }
            jTable1.setModel(modelo);
            JOptionPane.showMessageDialog(jd_Campos, "Se ha borrado el campo exitosamente.");
        }
    }//GEN-LAST:event_jb_borrarcampoMouseClicked

    private void jb_regresarcamposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarcamposMouseClicked
        // TODO add your handling code here:
        boolean flag = false;
        for (int i = 0; i < llaveunica.size(); i++) {
            if (llaveunica.get(i) == true) {
                flag = true;
                break;
            }
        }
        if (flag) {
            jd_Campos.dispose();
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]{},
                    new String[]{
                        "Nombre", "Tipo", "Tamaño", "Llave Unica"
                    }
            ));
        } else {
            JOptionPane.showMessageDialog(jd_Campos, "Debe tener al menos un campo que sea llave!\nIntente de nuevo luego de crear un campo llave\nSi llego al maximo de campos se recomienda borrar o modificar un campo!");
        }
    }//GEN-LAST:event_jb_regresarcamposMouseClicked

    private void jm_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_guardarActionPerformed
        // TODO add your handling code here:
        /*if (jm_guardar.isEnabled()) {
            try {
                flujo.writeInt(campos.size());
                for (int i = 0; i < campos.size(); i++) {
                    flujo.writeUTF(campos.get(i));
                    flujo.writeUTF(tiposcampos.get(i));
                    flujo.writeInt(sizecampos.get(i));
                    flujo.writeBoolean(llaveunica.get(i));
                }

                flujo.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
            campos.clear();
            sizecampos.clear();
            llaveunica.clear();
            tiposcampos.clear();
            jm_archivo.setEnabled(false);
            jm_guardar.setEnabled(false);
            jb_nuevoarchivo.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Se ha guardado el archivo de manera satisfactoria!\nSe ha procedido a cerrarlo!");
        }*/
        if (flujo != null) {
            System.out.println("entro dog");
            try {
                flujo.seek(0);
                System.out.println("Guardando avail: " + avail);
                flujo.writeInt(avail);
                flujo.writeInt(campos.size());
                for (int i = 0; i < campos.size(); i++) {
                    flujo.writeUTF(campos.get(i));
                    flujo.writeUTF(tiposcampos.get(i));
                    flujo.writeInt(sizecampos.get(i));
                    flujo.writeBoolean(llaveunica.get(i));
                }
                archivoBtree.delete();
                archivoBtree.createNewFile();
                flujoBtree.close();
                flujoBtree = new RandomAccessFile(archivoBtree, "rw");
                ArrayList<Registro> registros;
                registros = arbol.llaves();
                flujoBtree.writeInt(registros.size());
                for (int i = 0; i < registros.size(); i++) {
                    flujoBtree.writeInt(registros.get(i).getKey());
                    flujoBtree.writeLong(registros.get(i).getRRN());
                }
                flujoBtree.close();
                flujo.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
            campos.clear();
            sizecampos.clear();
            llaveunica.clear();
            tiposcampos.clear();
            jm_archivo.setEnabled(false);
            jm_guardar.setEnabled(false);
            jb_nuevoarchivo.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Se ha guardado el archivo de manera satisfactoria!\nSe ha procedido a cerrarlo!");
        }
    }//GEN-LAST:event_jm_guardarActionPerformed

    private void jm_camposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_camposActionPerformed
        // TODO add your handling code here:
        if (archivoResgistros()) {
            jd_Campos.setModal(true);
            jd_Campos.pack();
            jd_Campos.setLocationRelativeTo(this);
            jd_Campos.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "El archivo ya contiene registros por lo que no se permite modificar campos!");
        }
    }//GEN-LAST:event_jm_camposActionPerformed

    private void jm_exitsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_exitsaveActionPerformed
        // TODO add your handling code here:
        if (flujo != null) {
            try {
                System.out.println("Guardando avail: " + avail);
                flujo.seek(0);
                flujo.writeInt(avail);
                flujo.writeInt(campos.size());
                for (int i = 0; i < campos.size(); i++) {
                    flujo.writeUTF(campos.get(i));
                    flujo.writeUTF(tiposcampos.get(i));
                    flujo.writeInt(sizecampos.get(i));
                    flujo.writeBoolean(llaveunica.get(i));
                }
                archivoBtree.delete();
                archivoBtree.createNewFile();
                flujoBtree.close();
                flujoBtree = new RandomAccessFile(archivoBtree, "rw");
                ArrayList<Registro> registros;
                registros = arbol.llaves();
                flujoBtree.writeInt(registros.size());
                for (int i = 0; i < registros.size(); i++) {
                    flujoBtree.writeInt(registros.get(i).getKey());
                    flujoBtree.writeLong(registros.get(i).getRRN());
                }
                flujoBtree.close();
                flujo.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
            campos.clear();
            sizecampos.clear();
            llaveunica.clear();
            tiposcampos.clear();
            jm_archivo.setEnabled(false);
            jm_guardar.setEnabled(false);
            jb_nuevoarchivo.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Se ha guardado el archivo de manera satisfactoria!\nSe ha procedido a cerrarlo!");
        }
        System.exit(0);
    }//GEN-LAST:event_jm_exitsaveActionPerformed

    private void jm_exitsaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jm_exitsaveMouseClicked
        // TODO add your handling code here:
        if (flujo != null) {
            try {
                System.out.println("Guardando avail: " + avail);
                flujo.seek(0);
                flujo.writeInt(avail);
                flujo.writeInt(campos.size());
                for (int i = 0; i < campos.size(); i++) {
                    flujo.writeUTF(campos.get(i));
                    flujo.writeUTF(tiposcampos.get(i));
                    flujo.writeInt(sizecampos.get(i));
                    flujo.writeBoolean(llaveunica.get(i));
                }
                archivoBtree.delete();
                archivoBtree.createNewFile();
                flujoBtree.close();
                flujoBtree = new RandomAccessFile(archivoBtree, "rw");
                ArrayList<Registro> registros;
                registros = arbol.llaves();
                System.out.println(registros);
                flujoBtree.writeInt(registros.size());
                for (int i = 0; i < registros.size(); i++) {
                    flujoBtree.writeInt(registros.get(i).getKey());
                    flujoBtree.writeLong(registros.get(i).getRRN());
                }
                flujoBtree.close();
                flujo.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
            campos.clear();
            sizecampos.clear();
            llaveunica.clear();
            tiposcampos.clear();
            jm_archivo.setEnabled(false);
            jm_guardar.setEnabled(false);
            jb_nuevoarchivo.setEnabled(true);
            JOptionPane.showMessageDialog(this, "Se ha guardado el archivo de manera satisfactoria!\nSe ha procedido a cerrarlo!");
        }
        System.exit(0);
    }//GEN-LAST:event_jm_exitsaveMouseClicked

    private void jm_registroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_registroActionPerformed
        regsize = 0;
        for (int i = 0; i < tiposcampos.size(); i++) {
            switch (tiposcampos.get(i)) {
                case "String":
                    regsize += 2;
                    regsize += sizecampos.get(i);
                    break;
                case "boolean":
                    regsize++;
                    break;
                case "double":
                    regsize += 8;
                    break;
                case "int":
                    regsize += 4;
                    break;
            }
        }
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        jd_Registro.setModal(true);
        jd_Registro.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        jd_Registro.pack();
        jd_Registro.setLocationRelativeTo(this);
        jd_Registro.setVisible(true);
    }//GEN-LAST:event_jm_registroActionPerformed

    private void jb_salirregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_salirregistroMouseClicked
        // TODO add your handling code here:
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{}
        ));
        jd_Registro.dispose();
    }//GEN-LAST:event_jb_salirregistroMouseClicked

    private void jb_introducirregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_introducirregistroMouseClicked
        // TODO add your handling code here:
        //crear datos
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        ArrayList<Object> camposregistro = new ArrayList();
        String auxiliar = "";
        int posllave=0;
        for (int i = 0; i < llaveunica.size(); i++) {
            if (llaveunica.get(i)) {
                posllave=i;
                break;
            }
        }
        for (int i = 0; i < tiposcampos.size(); i++) {
            switch (tiposcampos.get(i)) {
                case "String":
                    try {
                        String dato = JOptionPane.showInputDialog("Ingrese la informacion para " + campos.get(i));

                        if (dato.length() != sizecampos.get(i)) {
                            if (dato.length() < sizecampos.get(i)) {
                                for (int j = dato.length(); j < sizecampos.get(i); j++) {
                                    dato += "|";
                                }
                            } else {
                                auxiliar = "";
                                for (int j = 0; j < sizecampos.get(i); j++) {
                                    auxiliar += dato.charAt(j);
                                }
                                dato = auxiliar;
                            }
                        }
                        camposregistro.add(dato);
                    } catch (Exception e) {
                        i--;
                    }
                    break;
                case "boolean":
                    try {
                        int confirmacion = JOptionPane.showConfirmDialog(null, "El campo es un " + campos.get(i) + " ?", null, JOptionPane.YES_NO_OPTION);
                        if (confirmacion == JOptionPane.YES_OPTION) {
                            camposregistro.add(true);
                        } else if (confirmacion == JOptionPane.NO_OPTION) {
                            camposregistro.add(false);
                        }
                    } catch (Exception e) {
                        i--;
                    }
                    break;
                case "double":
                    try {
                        double dato = Double.parseDouble(JOptionPane.showInputDialog("Ingrese la informacion tipo double del campo " + campos.get(i) + ":"));
                        camposregistro.add(dato);
                    } catch (Exception e) {
                        i--;
                    }
                    break;
                case "int":
                    if (i==posllave) {
                        boolean flag1=true;
                        while(flag1){
                            try {
                                int dato = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la informacion tipo int del campo " + campos.get(i) + ":"));
                                Registro tmp=new Registro(dato);
                                Bnode nodo=arbol.search(tmp);
                                if (nodo==null) {
                                    flag1=false;
                                    camposregistro.add(dato);
                                }
                            } catch (Exception e) {                                
                            }
                        }
                    }else{
                        try {
                            int dato = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la informacion tipo int del campo " + campos.get(i) + ":"));
                            camposregistro.add(dato);
                        } catch (Exception e) {
                            i--;
                        }
                    }
                    break;
            }
        }

        if (avail == -1) {
            System.out.println("entro");
            int pos = 0;
            for (int i = 0; i < llaveunica.size(); i++) {
                if (llaveunica.get(i)) {
                    pos = i;
                    break;
                }
            }
            Registro r = new Registro((int) camposregistro.get(pos));
            long cantidadregistros = 0;
            try {
                cantidadregistros = (flujo.length() - metainf) / regsize;
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cantidadregistros < 1) {
                r.setRRN(1);
            } else {
                r.setRRN(cantidadregistros + 1);
            }
            arbol.insert(r);
            Object[] linea = new String[camposregistro.size()];
            for (int i = 0; i < camposregistro.size(); i++) {
                if (tiposcampos.get(i).equals("String")) {
                    String momento=camposregistro.get(i).toString();
                    String aux="";
                    for (int k = 0; k < momento.length(); k++) {
                        if (!(momento.charAt(k)=='|')) {
                            aux+=momento.charAt(k);
                        }
                    }
                    linea[i]=aux;
                }else{
                    linea[i] = camposregistro.get(i).toString();
                }
            }
            DefaultTableModel modelo = (DefaultTableModel) jt_registros.getModel();
            modelo.addRow(linea);
            jt_registros.setModel(modelo);
            if (cantidadregistros < 1) {
                System.out.println("entro");
                try {
                    flujo.seek(metainf);
                    for (int i = 0; i < tiposcampos.size(); i++) {
                        switch (tiposcampos.get(i)) {
                            case "String":
                                flujo.writeUTF((String) camposregistro.get(i));
                                break;
                            case "boolean":
                                flujo.writeBoolean((Boolean) camposregistro.get(i));
                                break;
                            case "double":
                                flujo.writeDouble((Double) camposregistro.get(i));
                                break;
                            case "int":
                                flujo.writeInt((Integer) camposregistro.get(i));
                                break;
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("entro1");
                try {
                    flujo.seek(metainf + (cantidadregistros) * regsize);
                    for (int i = 0; i < tiposcampos.size(); i++) {
                        switch (tiposcampos.get(i)) {
                            case "String":
                                flujo.writeUTF((String) camposregistro.get(i));
                                break;
                            case "boolean":
                                flujo.writeBoolean((Boolean) camposregistro.get(i));
                                break;
                            case "double":
                                flujo.writeDouble((Double) camposregistro.get(i));
                                break;
                            case "int":
                                flujo.writeInt((Integer) camposregistro.get(i));
                                break;
                        }
                    }                   
                } catch (Exception e) {
                }
            }
            JOptionPane.showMessageDialog(jd_Registro, "Se ingreso registro satisfactoriamente!");
        } else {
            int pos = 0;
            for (int i = 0; i < llaveunica.size(); i++) {
                if (llaveunica.get(i)) {
                    pos = i;
                    break;
                }
            }
            Registro r = new Registro((int) camposregistro.get(pos));
            r.setRRN(avail);
            arbol.insert(r);
            try {
                flujo.seek(metainf+((avail-1)*regsize));
                int newavail=flujo.readInt();
                flujo.seek(metainf+((avail-1)*regsize));
                for (int i = 0; i < tiposcampos.size(); i++) {
                    switch (tiposcampos.get(i)) {
                        case "String":
                            flujo.writeUTF((String) camposregistro.get(i));
                            break;
                        case "boolean":
                            flujo.writeBoolean((Boolean) camposregistro.get(i));
                            break;
                        case "double":
                            flujo.writeDouble((Double) camposregistro.get(i));
                            break;
                        case "int":
                            flujo.writeInt((Integer) camposregistro.get(i));
                            break;
                    }
                }
                avail=newavail;
                } catch (Exception e) {
                }
                JOptionPane.showMessageDialog(jd_Registro, "Se ingreso registro satisfactoriamente!");
        }

    }//GEN-LAST:event_jb_introducirregistroMouseClicked

    private void jb_xmlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_xmlMouseClicked
        ArrayList<Registro> registros=arbol.llaves();
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        DefaultTableModel modelo = (DefaultTableModel) jt_registros.getModel();
        for (int h = 0; h < registros.size(); h++) {
            Bnode nodo=arbol.search(registros.get(h));
            if (nodo!=null) {
                Object[] linea;
                    for (int i = 0; i < nodo.getN(); i++) {
                        linea = new String[campos.size()];
                        if (nodo.getKeys()[i]!=null&&nodo.getKeys()[i].getKey()==registros.get(h).getKey()) {
                            long rrn=nodo.getKeys()[i].getRRN();
                            try {
                                flujo.seek(metainf+((rrn-1)*regsize));
                                for (int j = 0; j < campos.size(); j++) {
                                    switch (tiposcampos.get(j)) {
                                        case "String":
                                            String momento=flujo.readUTF();
                                            String aux="";
                                            for (int k = 0; k < momento.length(); k++) {
                                                if (!(momento.charAt(k)=='|')) {
                                                    aux+=momento.charAt(k);
                                                }
                                            }
                                            linea[j]=aux;
                                            break;
                                        case "boolean":
                                            linea[j]=Boolean.toString(flujo.readBoolean());
                                            break;
                                        case "double":
                                            linea[j]=Double.toString(flujo.readDouble());
                                            break;
                                        case "int":
                                            int n=flujo.readInt();
                                            linea[j]=Integer.toString(n);
                                            break;
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            System.out.println(linea);
                            modelo.addRow(linea);
                        }                        
                    }
            }
        }
        System.out.println("Campos: "+campos);
        System.out.println("Tipos Campos: "+tiposcampos);
        System.out.println("Filas modelo: "+modelo.getRowCount());
        jt_registros.setModel(modelo);
        Metadata metadata=new Metadata();
        metadata.setCampos(campos);
        metadata.setTipos(tiposcampos);
        metadata.setSizeMeta((int)metainf);
        metadata.setNumregistros(modelo.getRowCount());        
        try {
            if (archivo == null || metadata == null || metadata.getCampos() == null || metadata.getNumregistros() == 0) {
                JOptionPane.showMessageDialog(null, "No hay informacion cargada");
            } else {
                String name = JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo a exportar: ");
                ArrayList registrost = new ArrayList();

                for (int i = 0; i < jt_registros.getRowCount(); i++) {
                    ArrayList row = new ArrayList();
                    for (int j = 0; j < jt_registros.getColumnCount(); j++) {
                        row.add(jt_registros.getValueAt(i, j));
                    }
                    registrost.add(row);
                }
                exportXML(metadata.getCampos(), registrost, name);
                JOptionPane.showMessageDialog(jd_Estandarizacion, "Se completo la exportacion.");
            }

        } catch (Exception e) {
            System.out.println("Could not export successfully");
        }
    }//GEN-LAST:event_jb_xmlMouseClicked

    private void jb_xlssMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_xlssMouseClicked
        ArrayList<Registro> registros=arbol.llaves();
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        DefaultTableModel modelo = (DefaultTableModel) jt_registros.getModel();
        for (int h = 0; h < registros.size(); h++) {
            Bnode nodo=arbol.search(registros.get(h));
            if (nodo!=null) {
                Object[] linea;
                    for (int i = 0; i < nodo.getN(); i++) {
                        linea = new String[campos.size()];
                        if (nodo.getKeys()[i]!=null&&nodo.getKeys()[i].getKey()==registros.get(h).getKey()) {
                            long rrn=nodo.getKeys()[i].getRRN();
                            try {
                                flujo.seek(metainf+((rrn-1)*regsize));
                                for (int j = 0; j < campos.size(); j++) {
                                    switch (tiposcampos.get(j)) {
                                        case "String":
                                            String momento=flujo.readUTF();
                                            String aux="";
                                            for (int k = 0; k < momento.length(); k++) {
                                                if (!(momento.charAt(k)=='|')) {
                                                    aux+=momento.charAt(k);
                                                }
                                            }
                                            linea[j]=aux;
                                            break;
                                        case "boolean":
                                            linea[j]=Boolean.toString(flujo.readBoolean());
                                            break;
                                        case "double":
                                            linea[j]=Double.toString(flujo.readDouble());
                                            break;
                                        case "int":
                                            int n=flujo.readInt();
                                            linea[j]=Integer.toString(n);
                                            break;
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            System.out.println(linea);
                            modelo.addRow(linea);
                        }                        
                    }
            }
        }
        System.out.println("Campos: "+campos);
        System.out.println("Tipos Campos: "+tiposcampos);
        System.out.println("Filas modelo: "+modelo.getRowCount());
        jt_registros.setModel(modelo);
        Metadata metadata=new Metadata();
        metadata.setCampos(campos);
        metadata.setTipos(tiposcampos);
        metadata.setSizeMeta((int)metainf);
        metadata.setNumregistros(modelo.getRowCount());        
        try {
            if (archivo == null || metadata == null || metadata.getCampos() == null || metadata.getNumregistros() == 0) {
                JOptionPane.showMessageDialog(null, "No hay informacion cargada");
            } else {
                String name = JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo a exportar: ");
                ExportToExcel(metadata, name, jt_registros);
            }

        } catch (Exception e) {
            System.out.println("Error Fatal.");
        }              
    }//GEN-LAST:event_jb_xlssMouseClicked

    private void jblistarregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jblistarregistroMouseClicked
        // TODO add your handling code here:
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        boolean flag=true;
        int PrimeKey=0;
        while(flag){
            try {
                PrimeKey=Integer.parseInt(JOptionPane.showInputDialog("Ingrese la llave primaria del registro que busca: "));
                Registro r=new Registro(PrimeKey);
                Bnode nodo=arbol.search(r);
                if (nodo!=null) {
                    DefaultTableModel modelo = (DefaultTableModel) jt_registros.getModel();
                    //modelo.addRow(linea);
                    Object[] linea;
                    for (int i = 0; i < nodo.getN(); i++) {
                        linea = new String[campos.size()];
                        if (nodo.getKeys()[i]!=null) {
                            long rrn=nodo.getKeys()[i].getRRN();
                            try {
                                flujo.seek(metainf+((rrn-1)*regsize));
                                for (int j = 0; j < campos.size(); j++) {
                                    switch (tiposcampos.get(j)) {
                                        case "String":
                                            String momento=flujo.readUTF();
                                            String aux="";
                                            for (int k = 0; k < momento.length(); k++) {
                                                if (!(momento.charAt(k)=='|')) {
                                                    aux+=momento.charAt(k);
                                                }
                                            }
                                            linea[j]=aux;
                                            break;
                                        case "boolean":
                                            linea[j]=Boolean.toString(flujo.readBoolean());
                                            break;
                                        case "double":
                                            linea[j]=Double.toString(flujo.readDouble());
                                            break;
                                        case "int":
                                            int n=flujo.readInt();
                                            linea[j]=Integer.toString(n);
                                            break;
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            System.out.println(linea);
                            modelo.addRow(linea);
                        }                        
                    }
                    flag=false;
                    jt_registros.setModel(modelo);                    
                }else{
                    flag=false;
                    JOptionPane.showMessageDialog(jd_Registro, "No existe el registro! Intente nuevamente.");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jblistarregistroMouseClicked

    private void jb_buscarregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_buscarregistroMouseClicked
        // TODO add your handling code here:
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        boolean flag=true;
        int PrimeKey=0;
        while(flag){
            try {
                PrimeKey=Integer.parseInt(JOptionPane.showInputDialog("Ingrese la llave primaria del registro que busca: "));
                Registro r=new Registro(PrimeKey);
                Bnode nodo=arbol.search(r);
                if (nodo!=null) {
                    DefaultTableModel modelo = (DefaultTableModel) jt_registros.getModel();
                    //modelo.addRow(linea);
                    Object[] linea;
                    for (int i = 0; i < nodo.getN(); i++) {
                        linea = new String[campos.size()];
                        if (nodo.getKeys()[i]!=null&&nodo.getKeys()[i].getKey()==r.getKey()) {
                            long rrn=nodo.getKeys()[i].getRRN();
                            try {
                                flujo.seek(metainf+((rrn-1)*regsize));
                                for (int j = 0; j < campos.size(); j++) {
                                    switch (tiposcampos.get(j)) {
                                        case "String":
                                            String momento=flujo.readUTF();
                                            String aux="";
                                            for (int k = 0; k < momento.length(); k++) {
                                                if (!(momento.charAt(k)=='|')) {
                                                    aux+=momento.charAt(k);
                                                }
                                            }
                                            linea[j]=aux;
                                            break;
                                        case "boolean":
                                            linea[j]=Boolean.toString(flujo.readBoolean());
                                            break;
                                        case "double":
                                            linea[j]=Double.toString(flujo.readDouble());
                                            break;
                                        case "int":
                                            int n=flujo.readInt();
                                            linea[j]=Integer.toString(n);
                                            break;
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            System.out.println(linea);
                            modelo.addRow(linea);
                        }                        
                    }
                    flag=false;
                    jt_registros.setModel(modelo);                    
                }else{
                    flag=false;
                    JOptionPane.showMessageDialog(jd_Registro, "No existe el registro buscado! Intente de nuevo!");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jb_buscarregistroMouseClicked

    private void jb_modificarregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_modificarregistroMouseClicked
        // TODO add your handling code here:
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        boolean flag=true;
        ArrayList<Object> camposregistro = new ArrayList();
        String auxiliar = "";
        int posllave=0;
        for (int i = 0; i < llaveunica.size(); i++) {
            if (llaveunica.get(i)) {
                posllave=i;
                break;
            }
        }
        int PrimeKey=0;
        while(flag){
            try {
                PrimeKey=Integer.parseInt(JOptionPane.showInputDialog("Ingrese la llave primaria del registro que busca: "));
                Registro r=new Registro(PrimeKey);
                Bnode nodo=arbol.search(r);
                if (nodo!=null) {
                    DefaultTableModel modelo = (DefaultTableModel) jt_registros.getModel();
                    //modelo.addRow(linea);
                    Object[] linea;
                    for (int i = 0; i < nodo.getN(); i++) {
                        linea = new String[campos.size()];
                        if (nodo.getKeys()[i]!=null&&nodo.getKeys()[i].getKey()==r.getKey()) {
                            long rrn=nodo.getKeys()[i].getRRN();
                            try {
                                flujo.seek(metainf+((rrn-1)*regsize));
                                for (int j = 0; j < campos.size(); j++) {
                                    if (j==posllave) {
                                        int n=flujo.readInt();
                                        linea[j]=Integer.toString(n);
                                    }else{
                                        switch (tiposcampos.get(j)) {
                                            case "String":
                                                String momento=flujo.readUTF();
                                                String aux="";
                                                for (int k = 0; k < momento.length(); k++) {
                                                    if (!(momento.charAt(k)=='|')) {
                                                        aux+=momento.charAt(k);
                                                    }
                                                }
                                                linea[j]=aux;
                                                break;
                                            case "boolean":
                                                linea[j]=Boolean.toString(flujo.readBoolean());
                                                break;
                                            case "double":
                                                linea[j]=Double.toString(flujo.readDouble());
                                                break;
                                            case "int":
                                                int n=flujo.readInt();
                                                linea[j]=Integer.toString(n);
                                                break;
                                        }
                                    }
                                }
                                /*AQUI*/
                                for (int k = 0; k < tiposcampos.size(); k++) {
                                    switch (tiposcampos.get(k)) {
                                        case "String":
                                            try {
                                                String dato = JOptionPane.showInputDialog("Ingrese la informacion para " + campos.get(k));

                                                if (dato.length() != sizecampos.get(k)) {
                                                    if (dato.length() < sizecampos.get(k)) {
                                                        for (int j = dato.length(); j < sizecampos.get(k); j++) {
                                                            dato += "|";
                                                        }
                                                    } else {
                                                        auxiliar = "";
                                                        for (int j = 0; j < sizecampos.get(k); j++) {
                                                            auxiliar += dato.charAt(j);
                                                        }
                                                        dato = auxiliar;
                                                    }
                                                }
                                                camposregistro.add(dato);
                                            } catch (Exception e) {
                                                k--;
                                            }
                                            break;
                                        case "boolean":
                                            try {
                                                int confirmacion = JOptionPane.showConfirmDialog(null, "El campo es un " + campos.get(k) + " ?", null, JOptionPane.YES_NO_OPTION);
                                                if (confirmacion == JOptionPane.YES_OPTION) {
                                                    camposregistro.add(true);
                                                } else if (confirmacion == JOptionPane.NO_OPTION) {
                                                    camposregistro.add(false);
                                                }
                                            } catch (Exception e) {
                                                k--;
                                            }
                                            break;
                                        case "double":
                                            try {
                                                double dato = Double.parseDouble(JOptionPane.showInputDialog("Ingrese la informacion tipo double del campo " + campos.get(k) + ":"));
                                                camposregistro.add(dato);
                                            } catch (Exception e) {
                                                k--;
                                            }
                                            break;
                                        case "int":
                                            if (k==posllave) {                                                
                                                camposregistro.add(Integer.parseInt(linea[k].toString()));                                              
                                            }else{
                                                try {
                                                    int dato = Integer.parseInt(JOptionPane.showInputDialog("Ingrese la informacion tipo int del campo " + campos.get(k) + ":"));
                                                    camposregistro.add(dato);
                                                } catch (Exception e) {
                                                    k--;
                                                }
                                            }
                                            break;
                                    }
                                }
                                try {
                                    flujo.seek(metainf+((rrn-1)*regsize));
                                    for (int k = 0; k < tiposcampos.size(); k++) {
                                        switch (tiposcampos.get(k)) {
                                            case "String":
                                                linea[k]=camposregistro.get(k).toString();
                                                flujo.writeUTF((String) camposregistro.get(k));
                                                break;
                                            case "boolean":
                                                linea[k]=camposregistro.get(k).toString();
                                                flujo.writeBoolean((Boolean) camposregistro.get(k));
                                                break;
                                            case "double":
                                                linea[k]=camposregistro.get(k).toString();
                                                flujo.writeDouble((Double) camposregistro.get(k));
                                                break;
                                            case "int":
                                                linea[k]=camposregistro.get(k).toString();
                                                flujo.writeInt((Integer) camposregistro.get(k));
                                                break;
                                        }
                                    }
                                } catch (Exception e) {
                                }
                                for (int k = 0; k < camposregistro.size(); k++) {
                                    if (tiposcampos.get(k).equals("String")) {
                                        String momento=camposregistro.get(k).toString();
                                        String aux="";
                                        for (int j = 0; j < momento.length(); j++) {
                                            if (!(momento.charAt(j)=='|')) {
                                                aux+=momento.charAt(j);
                                            }
                                        }
                                        linea[k]=aux;
                                    }else{
                                        linea[k] = camposregistro.get(k).toString();
                                    }
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            System.out.println(linea);
                            modelo.addRow(linea);
                        }                        
                    }
                    flag=false;
                    jt_registros.setModel(modelo);                    
                }else{
                    flag=false;
                    JOptionPane.showMessageDialog(jd_Registro, "No existe el registro buscado! Intente de nuevo!");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jb_modificarregistroMouseClicked

    private void jb_borrarregistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_borrarregistroMouseClicked
        // TODO add your handling code here:
        String[] titulo = new String[campos.size()];
        for (int i = 0; i < campos.size(); i++) {
            titulo[i] = campos.get(i);
        }
        jt_registros.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                titulo
        ));
        boolean flag=true;
        int PrimeKey=0;
        while(flag){
             try {
                PrimeKey=Integer.parseInt(JOptionPane.showInputDialog("Ingrese la llave primaria del registro que desea eliminar: "));
                Registro r=new Registro(PrimeKey);
                Bnode nodo=arbol.search(r);
                if (nodo!=null) {
                    for (int i = 0; i < nodo.getN(); i++) {                        
                        if (nodo.getKeys()[i]!=null&&nodo.getKeys()[i].getKey()==r.getKey()) {
                            long rrn=nodo.getKeys()[i].getRRN();
                            try {
                                flujo.seek(metainf+((rrn-1)*regsize));
                                flujo.writeInt(avail);
                                avail=Integer.parseInt(Long.toString(rrn));                                
                            } catch (Exception e) {
                                e.printStackTrace();
                            }                            
                        }                        
                    }
                    arbol.remove(r);
                    flag=false;          
                    JOptionPane.showMessageDialog(jd_Registro, "Se ha eliminado el registro!");
                }else{
                    flag=false;
                    JOptionPane.showMessageDialog(jd_Registro, "No existe el registro a eliminar! Intente de nuevo!");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jb_borrarregistroMouseClicked

    private void jm_estandarizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_estandarizacionActionPerformed
        // TODO add your handling code here:
        regsize = 0;
        for (int i = 0; i < tiposcampos.size(); i++) {
            switch (tiposcampos.get(i)) {
                case "String":
                    regsize += 2;
                    regsize += sizecampos.get(i);
                    break;
                case "boolean":
                    regsize++;
                    break;
                case "double":
                    regsize += 8;
                    break;
                case "int":
                    regsize += 4;
                    break;
            }
        }
        jd_Estandarizacion.setModal(true);
        jd_Estandarizacion.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        jd_Estandarizacion.pack();
        jd_Estandarizacion.setLocationRelativeTo(this);
        jd_Estandarizacion.setVisible(true);
    }//GEN-LAST:event_jm_estandarizacionActionPerformed

    private void jb_regresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarMouseClicked
        // TODO add your handling code here:
        jd_Estandarizacion.dispose();
    }//GEN-LAST:event_jb_regresarMouseClicked

    public void ExportToExcel(Metadata metadata, String name, JTable table) {
        //Blank workbook
        System.out.println("Antes de workbook");
        XSSFWorkbook workbook=new XSSFWorkbook();
        System.out.println("Despues de workbook");
        //Create a blank sheet
        XSSFSheet sheet = workbook.createSheet("Estructura de Datos");
        int registros = table.getModel().getRowCount();
        //This data needs to be written (Object[])
        Map<String, Object[]> data = new TreeMap<String, Object[]>();
        data.put("1", metadata.getCampos().toArray());
        for (int i = 0; i < registros; i++) {
            ArrayList Registro = new ArrayList();
            for (int j = 0; j < metadata.getCampos().size(); j++) {
                Registro.add(table.getValueAt(i, j));
            }
            data.put(Integer.toString(i + 2), Registro.toArray());
        }
        //data.put("1", new Object[] {"ID", "NAME", "LASTNAME"});
        //data.put("2", new Object[] {1, "Amit", "Shukla"});
        //data.put("3", new Object[] {2, "Lokesh", "Gupta"});
        //data.put("4", new Object[] {3, "John", "Adwards"});
        //data.put("5", new Object[] {4, "Brian", "Schultz"});

        //Iterate over data and write to sheet
        Set<String> keyset = data.keySet();
        int rownum = 0;
        for (String key : keyset) {
            Row row = sheet.createRow(rownum++);
            Object[] objArr = data.get(key);
            int cellnum = 0;
            for (Object obj : objArr) {
                Cell cell = row.createCell(cellnum++);
                if (obj instanceof String) {
                    cell.setCellValue((String) obj);
                } // cell.setIte((String)obj);
                else if (obj instanceof Integer) {
                    cell.setCellValue((Integer) obj);
                }

            }
        }
        try {
            //Write the workbook in file system
            File filer = new File(name += ".xlsx");
            filer.delete();
            filer.createNewFile();
            FileOutputStream out = new FileOutputStream(filer);
            workbook.write(out);
            out.close();
            System.out.println(name + " written successfully on disk.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public static void exportXML(ArrayList Campos, ArrayList Regs, String Direccion) {
        Document document = null;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation implementation = builder.getDOMImplementation();
            document = implementation.createDocument(null, "xml", null);
            //Arraylist de campos

            for (int i = 0; i < Regs.size(); i++) {
                Element registro = document.createElement("Registro" + i);
                document.getDocumentElement().appendChild(registro);
                ArrayList<Element> elementos = new ArrayList();

                for (int j = 0; j < Campos.size(); j++) { //Llenando arraylist de elementos campos
                    Element campos = document.createElement(Campos.get(j).toString());
                    elementos.add(campos);
                }

                for (int h = 0; h < elementos.size(); h++) {
                    registro.appendChild(elementos.get(h));
                    Text valorCampo = document.createTextNode(Regs.get(h).toString());
                    elementos.get(h).appendChild(valorCampo);
                    document.setXmlVersion("1.0");

                }
            }
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();

            // Archivo donde almacenaremos el XML
            File archivo = new File(Direccion + ".xml");

            // Fuente de datos, en este caso el documento XML
            DOMSource source = new DOMSource(document);
            // Resultado, el cual almacena en el archivo indicado
            StreamResult result = new StreamResult(archivo);
            // Transformamos de ña fuente DOM a el resultado, lo que almacena todo en el archivo
            transformer.transform(source, result);
            //System.out.println("Ended");
        } catch (Exception e) {
            // Logger.getLogger(TreeTest2.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("COULD NOT EXPORT PROBABLY DIRTY EXPORTER STRING.");

        }
    }
    
    public boolean archivoResgistros() {
        try {
            if (flujo.length() > 500) {
                return false;//Contiene registros por lo que no se modificaran campos
            } else {
                return true;//No contiene registros
            }
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jb_agregarcampo;
    private javax.swing.JButton jb_borrarcampo;
    private javax.swing.JButton jb_borrarregistro;
    private javax.swing.JButton jb_buscarregistro;
    private javax.swing.JButton jb_cargararchivo;
    private javax.swing.JButton jb_introducirregistro;
    private javax.swing.JButton jb_listarcampo;
    private javax.swing.JButton jb_modificarcampo;
    private javax.swing.JButton jb_modificarregistro;
    private javax.swing.JButton jb_nuevoarchivo;
    private javax.swing.JButton jb_regresar;
    private javax.swing.JButton jb_regresarcampos;
    private javax.swing.JButton jb_salirregistro;
    private javax.swing.JButton jb_xlss;
    private javax.swing.JButton jb_xml;
    private javax.swing.JButton jblistarregistro;
    private javax.swing.JDialog jd_Campos;
    private javax.swing.JDialog jd_Estandarizacion;
    private javax.swing.JDialog jd_Registro;
    private javax.swing.JMenu jm_archivo;
    private javax.swing.JMenuItem jm_campos;
    private javax.swing.JMenuItem jm_estandarizacion;
    private javax.swing.JMenu jm_exitsave;
    private javax.swing.JMenu jm_guardar;
    private javax.swing.JMenuItem jm_registro;
    private javax.swing.JTable jt_registros;
    // End of variables declaration//GEN-END:variables
    private File archivo = null;
    private File archivoBtree = null;
    int avail = -1;
    private RandomAccessFile flujo = null;
    private RandomAccessFile flujoBtree = null;
    ArrayList<String> campos = new ArrayList();
    ArrayList<String> tiposcampos = new ArrayList();
    ArrayList<Integer> sizecampos = new ArrayList();
    ArrayList<Boolean> llaveunica = new ArrayList();
    long metainf = 500;
    long regsize;
    private BTree arbol;
    int cantllaves = 0;
}
